name: Setup
runs:
  using: "composite"
  steps:
    - name: Cache Protobuf CMake files
      id: cache-protobuf-cmake
      uses: actions/cache@v4
      env:
        cache-name: cache-protobuf-cmake
      with:
        path: ./external/protobuf/_build
        key: ${{ env.cache-name }}-${{ hashFiles('./external/protobuf/**/*') }}
    - name: Generate Protobuf CMake cache
      if: ${{ steps.cache-protobuf-cmake.outputs.cache-hit != 'true' }}
      run: |
        cd ./external/protobuf/
        cmake -S . -B _build -DCMAKE_INSTALL_PREFIX=_build/protobuf-install -DCMAKE_CXX_STANDARD=20 -DCMAKE_BUILD_TYPE=Release -Dprotobuf_BUILD_TESTS=OFF -DABSL_PROPAGATE_CXX_STD=ON -G Ninja
        cmake --build _build --config Release
        cmake --build _build -t install
        cd ../../
      shell: sh
    - name: Cache CMake files
      id: cache-cmake
      uses: actions/cache@v4
      env:
        cache-name: cache-cmake
      with:
        path: ./build
        key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', '**.cmake') }}
    - name: Generate C message sources
      run: |
        chmod +x ./tools/nanopb/generate
        ./tools/nanopb/generate
      shell: bash
    - name: Generate CMake cache
      if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
      run: cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug
      shell: sh